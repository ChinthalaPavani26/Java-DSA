import java.util.*;
class Node
{
  int data;
  Node next,prev;
  Node(int x)
	{
	  data = x;
	  prev = null;
	  next= null;
}
}

class DoubleList
{ 
	Node head,tail;
	DoubleList()
	{
	head = tail = null;
	}

   	void create(int x)
   	{
   	Node n = new Node(x);
   	if(head == null)
	{
	 head = tail = n;
         }
	else
	{
	 tail.next = n;
	 n.prev = tail;
	 tail = n;
         }
    }
  


void rshow()
{
	if(head == null)
	{
	System.out.println("List is empty");
	return;
        }
	Node temp = head;
	while(temp != null)
	{
	   System.out.print(temp.data+" ");
	   temp = temp.next;
	}
}


void lshow()
{
	if(head == null)
	{
	System.out.println("List is empty");
	return;
        }
	Node temp = tail;
	while(temp != null)
	{
           System.out.print(temp.data+" ");
	   temp = temp.prev;
	}
}

void insertFirst(int x)
{
Node n = new Node(x);
if(head == null)
{
   head = tail = n;
}
else
{
head.prev = n;
n.next = head;
head = n;
}
}

void insertPosition(int x,int pos)
{
Node n = new Node(x);
if(head == null)
 head = tail = null;
else
{
 Node temp = head;
 int count =1;
 while((count < pos) && (temp.next != null))
 {
	count = count+1;
	temp = temp.next;
}
if(temp.next == null)
{
 temp.next = n;
 n.prev = temp;
 tail = n;
}
else
{
n.next = temp;
n.prev = temp.prev;
temp.prev.next = n;
temp.prev=n;
}
}
}

void deleteFirst()
{
 if(head == null)
 {
 System.out.println("List is empty");
return;
 }
if(head.next == null)
{
 head = tail = null;
}
else
{
Node temp = head;
head = head.next;
head.prev = null;
temp = null;
}
}

void deleteLast()
{
 if(head == null)
 {
 System.out.println("List is empty");
 return;
 }
 if(tail.prev == null)
{
 head = tail = null;
}
else
{
Node temp = tail;
tail = tail.prev;
tail.next = null;
temp = null;
}
}

void  deletePosition(int pos)
{
	if(head == null)
	{ 
    	  System.out.println("List is empty");
	 return;
	}
        int c = 1;
	Node temp = head;
	while(c<pos && temp.next != null)
         {
	   c = c+1;
	   temp = temp.next;
         }
	 if(temp.next == null)
	 { 
		temp.prev.next = null;
		tail = temp.prev;
		temp = null;
	}
	else
	{
	temp.prev.next = temp.next;
	temp.next.prev = temp.prev;
	temp = null;
	}
	
}	
	
	



 


 



}
	   


	















class DLL
{
public static void main(String args[])
	{
	Scanner sc = new Scanner(System.in);
	DoubleList d1 = new DoubleList();
	for(;;)
	{
	System.out.println();
	System.out.println("\n1.Create\n2.display\n3.InsertFirst\n4.Insertposition\n5.DeleteFirst\n6.DeleteLast\n7.DeletePosition\n8.exit");
	System.out.println("Enter your choice");
	int ch= sc.nextInt();
	if(ch == 1)
	{
	 System.out.println("Enter an element");
	int x = sc.nextInt();
	d1.create(x);
	}
	else if( ch == 2)
	{
	 System.out.println("Which way to traverse\n1.Forward\n2.Backward");
	int r =sc.nextInt();
	if(r == 1)
	 d1.rshow();
	else if(r == 2)
	 d1.lshow();
	else
	System.out.println("Invalid choice");
	}
	else if(ch == 3)
	{
           System.out.println("Enter an element");
	   int x = sc.nextInt();
	   d1.insertFirst(x);
	  
	}
else if(ch == 4)
{
  System.out.println("Enter element ant position");
	int x = sc.nextInt();
	int pos= sc.nextInt();
	d1.insertPosition(x,pos);
}
else if(ch == 5)
{
d1.deleteFirst();
}
else if(ch == 6)
{
d1.deleteLast();
}
else if(ch == 7)
{
System.out.println("Enter the Position");
int pos = sc.nextInt();
d1.deletePosition(pos);
}
else if(ch == 8)
{
break;
}

else
System.out.println("Wrong Choice");
}
}
}




   *******************************************************************************************************************************************************************************************************

OUTPUT:

C:\Users\pavan>cd desktop

C:\Users\pavan\Desktop>cd DSA

C:\Users\pavan\Desktop\DSA>javac DLL.java

C:\Users\pavan\Desktop\DSA>java DLL


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
1
Enter an element
12


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
1
Enter an element
13


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
1
Enter an element
14


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
1
Enter an element
15


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
1
Enter an element
16


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
1
Enter an element
17


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
1
Enter an element
18


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
1
Enter an element
19


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
1
Enter an element
20


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
2
Which way to traverse
1.Forward
2.Backward
1
12 13 14 15 16 17 18 19 20

1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
2
Which way to traverse
1.Forward
2.Backward
2
20 19 18 17 16 15 14 13 12

1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
3
Enter an element
123


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
2
Which way to traverse
1.Forward
2.Backward
1
123 12 13 14 15 16 17 18 19 20

1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
4
Enter element ant position
234 5


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
2
Which way to traverse
1.Forward
2.Backward
1
123 12 13 14 234 15 16 17 18 19 20

1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
5


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
2
Which way to traverse
1.Forward
2.Backward
1
12 13 14 234 15 16 17 18 19 20

1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
5


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
2
Which way to traverse
1.Forward
2.Backward
1
13 14 234 15 16 17 18 19 20

1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
6


1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
2
Which way to traverse
1.Forward
2.Backward
1
13 14 234 15 16 17 18 19

1.Create
2.display
3.InsertFirst
4.Insertposition
5.DeleteFirst
6.DeleteLast
7.DeletePosition
8.exit
Enter your choice
8
