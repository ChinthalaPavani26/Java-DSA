/**************General Binary tree************************/


import java.util.*;
class Node
{
  int data;
  Node left,right;
  Node(int x)
  {
  data = x;
  left = null;
  right = null;
  }

void insert(Node root,int x)
{
	Queue<Node> que = new LinkedList<>();
	que.add(root);
	while(!que.isEmpty())
	{
		Node temp  = que.poll();
		if(temp.left == null)
		{
			temp.left = new Node(x);
			break;
		}
		else
		que.add(temp.left);
			if(temp.right == null)
			{
				temp.right = new Node(x);
				break;
			}
			else
                          que.add(temp.right);
		
	}
}

void printTree(Node root)
{
	if(root != null)
	{
		printTree(root.left);
		System.out.print(root.data+" ");
		printTree(root.right);
	}
}
//to count no of nodes in the binarysearch tree
int countNodes(Node root)
{
int count = 0;
if(root != null)
{ 
count = 1+countNodes(root.left)+countNodes(root.right);
}
return count;

	

}




}





class GeneralBinaryTree
{
	public static void main(String args[])
	{
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter root node");
		int x = sc.nextInt();
		Node root = new Node(x);
		while(true)
		{
			System.out.println();

			System.out.println("1.Insert\n2.Print\n3.countNodes\n4.Exit");
			System.out.println("Enter your choice");
			int ch = sc.nextInt();
			if(ch == 1)
			{
				System.out.print("Enter element");
				x = sc.nextInt();
				root.insert(root,x);
			}
			else if(ch == 2)
			{
				root.printTree(root);
			}
			else if(ch == 3)
			 {
				int ans = root.countNodes(root);
				System.out.println(ans);
			 }

			else if(ch == 4)
				break;
              		else
				System.out.println("Invalid Choice");
             }
}
